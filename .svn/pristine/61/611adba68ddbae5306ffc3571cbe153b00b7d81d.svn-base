(function($) {
	
	$._option = function(option) {
		if (!option.$id || !option.data)
			return;
		
		var optional = avalon.define({
			$id: option.$id,
			data: option.data,
			showId: true,
			oneKey: true,
			show: false,
			close: function() {
				this.show = false;
			},
			oneKeySet: function(e) {
				$("input[data-rate]").val(e.target.value);
			},
			setVal: function(param, type, index) {
				if ((this.oneKey && param) || type != 0) {
					for (var i in this.data.products) {
						var item = this.data.products[i];
						if (typeof index == "undefined") {
							if (this.oneKey || item.product.type != 0) {
								item[param] = event.target.value;
							}
						}else if (!isNaN(index)){
							if ((index >= 0 && index < item.amountRates.length) && (this.oneKey || item.product.type != 0)) {
								item.amountRates[index][param] = event.target.value;
							}
						}
					}
				}
			},
			save: function(e) {
				this.showId = true;
				this.validate.onManual();
			},
			saveas: function(e) {
				this.showId = false;
				this.validate.onManual();
			},
			dele: function(key, index) {
				this.data[key].splice(index, 1);
			},
			deleteRate: function(index, type) {
				if(this.data.products[index].amountRates.length > 3) {
					if (this.oneKey || type != 0) {
						for (var i in this.data.products) {
							var item = this.data.products[i];
							if (this.oneKey || item.product.type != 0) {
								item.amountRates.pop();
							}
						}
					}else {
						this.data.products[index].amountRates.pop();
					}
				}else {
					$.modalmsg("\u81f3\u5c11\u8bbe\u7f6e\u4e09\u7ec4\u91d1\u989d\uff01");
				}
			},
			change: function(e) {
				$("#browserCommand").val($(e.target).find("option:selected").attr("data-value"));
			},
			add: function(key, param, type) {
				if (key === "npcInfos") {
					this.data[key].push($._option.fn[key](param));
				}else if (key === "products") {
					if (this.oneKey || type != 0) {
						for (var i in this.data.products) {
							var item = this.data.products[i];
							if (this.oneKey || item.product.type != 0) {
								item.amountRates.push($._option.fn[key]);
							}
						}
					}else {
						this.data.products[param].amountRates.push($._option.fn[key]);
					}
				}else {
					this.data[key].push($._option.fn[key]);
				}
			},
			currency: function(e) {
				var index = Math.abs((e.target.value || 0));
				index = index > 3 ? 0 : index;
				$("#currencyName").val($._option.fn.currency[index].name);
				$("#scriptCommand").val($._option.fn.currency[index].command);
			},
			nodeToggle: function(e) {
				var $node_body = $(e.target).parents(".content-node").find(".node-body");
				var isHidden = $node_body.is(":hidden");
				if (isHidden) {
					$(e.target).removeClass("close");
				}else {
					$(e.target).addClass("close");
				}
				$node_body.animate({height: "toggle"}, 300);
			},
			validate: {
				onError: function (reasons) {
	                reasons.forEach(function (reason) {
	                    console.log(reason.getMessage())
	                })
	            },
				onValidateAll: function(reasons) {
					if (reasons.length) {
						for (var index in reasons) {
							var contentNode = $(reasons[index].element).parents(".content-node");
							var nodeToggle = contentNode.find("a.close");
							if (nodeToggle.length > 0) {
								nodeToggle.removeClass("close");
								contentNode.find(".node-body").animate({height: "toggle"}, 300);
							}
							$(reasons[index].element).focus();
	                    	$.modalmsg(reasons[index].getMessage());
	                    	return;
						}
	                }else {
	                	option.url && $.ajax({
	                    	url: option.url,
	                    	data: $(this).serialize(),
	                    	success: function(data) {
	                    		data.msg && $.modalmsg(data.msg);
	                    		if (data.ele) {
	                    			$("[name="+data.ele+"]").focus();
	                    		}
	                    		
	                    		if (data.state)
	                    			optional.show = false;
	                    		
	                    		if (data.state && optional.data.callback)
	                    			optional.data.callback();
	                    		
	                    		if (data.state && option.flash)
	                    			window.location.reload();
	                    		
	                    		if (data.state && option.back)
	                    			$.confirm({
	                    				content: data.msg + "\u662f\u5426\u7ee7\u7eed\u64cd\u4f5c\uff1f",
	                    				yes: function() {
	                    					return true;
	                    				},
	                    				no: function() {
	                    					window.location.href = option.back;
	                    				}
	                    			});
	                    	}
	                    });
	                }
				}
			}
		});
		return optional;
	};
	
	$._option.fn = {
		npcInfos: function(type) {
			return {
				name: type?"\u5145\u503c\u4f7f\u8005":"\u7ea2\u5305\u4f7f\u8005", 
				map: "0", looks: "0", x_axis: "0", y_axis: "0", type: type
			};
		},
		incentives: {amount: 0, giveAmount: 0},
		additionals: {name: "", show: false, command: "", ratio: 0, type: 0},
		integrals: {name: "", show: false, file: "", ratio: 0, type: 0},
		equips: {name: "", show: false, amount: "", command: "Give", type: 0},
		redPackets: {amount: 0, startAmount: 0, endAmount: 0},
		products: {amount: 0, rate: 0},
		currency: [
			{name: "", command: ""},
			{name: "元宝", command: "GAMEGOLD + "},
			{name: "金币", command: "give 金币 "},
			{name: "金元", command: "COLLECTPOINT + "}
		]
	};
	
	$.render = {
		state: function(option) {
			return function(id) {
				var callback = this.callback;
				var event = window.event || arguments.callee.caller.arguments[0];
				var target= event.target || event.srcElement;
				id && option && option.url && $.ajax({
					url: option.url,
					load: false,
					data:{id: id},
					success: function(data) {
						if (data.state) {
							option.msg && $.modalmsg(target.checked?option.msg[0]:option.msg[1]);
						}else{
							$.modalmsg(data.msg);
						}
						option.callback && callback();
					}
				});
			};
		},
		dele: function(option) {
			return function(id) {
				var callback = this.callback;
				id && $.confirm({
					content: option.content || "\u5220\u9664\u540e\u6570\u636e\u5c06\u65e0\u6cd5\u6062\u590d\uff0c\u662f\u5426\u786e\u5b9a\uff1f",
					yes: function() {
						option && option.url && $.ajax({
							url: option.url,
							load: false,
							data:{id: id},
							success: function(data) {
								$.modalmsg(data.msg);
								if (data.state)
									callback();
							}
						});
						return true;
					}
				});
			};
		}
	};
	
	$._merge = function(options) {
		options && $.modalbox({
			title: options.title,
			validate: true,
			content: $._content({
				forms: options.forms
			}),
			yes: function(data) {
				var result = false;
				options.url && $.ajax({
					url: options.url,
					async: false,
					data: data,
					success: function(data) {
						$.modalmsg(data.msg, "top-200");
						data.ele && $("[name="+data.ele+"]").focus();
						result = data.state;
					}
				});
				
				result && options.render && options.render();
				return result;
			}
		});
	};
	
	$._content = function(options) {
		var content = "";
		if (options && options.forms) {
			for (var i = 0; i < options.forms.length; i++) {
				var form = options.forms[i];
				if (form.hide) {
					content += $._content.fn[form.type](form);
				}else {
					content += "<div class='form-line'><span class='form-title'>";
					content += form.title + "：</span>";
					content += $._content.fn[form.type](form);
					content += "</div>";
				}
			}
		}
		return content;
	};
	
	$._content.fn = [
		function(data) {
			return '<input class="form-control '+(data.clazz||'')+'" type="'+(data.hide?"hidden":"text")+'"'+ 
				'name="'+data.name+'" placeholder="\u8bf7\u8f93\u5165'+(data.title||'')+'" value="'+(data.value||'')+'">';
		}
	];
	
	$.analyse = function(options) {
		var analyse = avalon.define({
			$id: options.id,
			param: null,
			data: {number: -1, totalPages: 0, totalElements: 0, size: 10},
			tabData: null,
			isAgency: false
			,
			query: function() {
				this.param = $(options.form).serialize();
				var _this = this;
				$.ajax({
					url: options.url,
					data: _this.param,
					success: function(data) {
						if (data) {
							_this.data.content = data;
							_this[options.show]();
						}
					}
				});
			},
			tab: function() {
				this.data.number = 0;
				this.data.totalElements = this.data.content.length;
				this.page();
			},
			page: function() {
				var data = this.data.content, tabData = [];
				var start = this.data.size * this.data.number;
				var end = this.data.size * (this.data.number+1);
				this.data.totalPages = Math.ceil(
						this.data.content.length/this.data.size);
				end = end > data.length?data.length:end;
				for (var i = start; i < end; i++) {
					data[i][6] = i + 1;
					var rate = (data[i][1]/data[i][5]) * 100;
					
					data[i][7] = rate.toFixed(2) + "%";
					tabData.push(data[i]);
					
				}
				this.tabData = tabData;
			},
			first: function() {
				if (this.data.number > 0) {
					this.data.number = 0;
					this.page();
				}else {
					$.modalmsg && $.modalmsg("\u5f53\u524d\u5df2\u662f\u7b2c\u4e00\u9875\uff01");
				}
			},
			prev: function() {
				if (this.data.number > 0) {
					 this.data.number--;
				}else {
					this.data.number = this.data.totalPages - 1;
				}
				this.page();
			},
			next: function() {
				if (this.data.number < this.data.totalPages - 1) {
					this.data.number++;
				}else {
					this.data.number = 0;
				}
				this.page();
			},
			last: function() {
				if (this.data.number < this.data.totalPages - 1) {
					this.data.number = this.data.totalPages - 1;
					this.page();
				}else {
					$.modalmsg && $.modalmsg("\u5f53\u524d\u5df2\u662f\u6700\u540e\u4e00\u9875\uff01");
				}
			},
			change: function(e) {
				this.data.number = 0;
				this.data.size = $("#pageSize").val();
				this.page();
			},
			jump: function() {
				var jumpto = $("#jumpto").val();
				if (jumpto && !isNaN(jumpto)) {
					jumpto--;
					if (jumpto >= 0 && jumpto < this.data.totalPages) {
						this.data.number = jumpto;
						this.page();
					}else {
						$("#jumpto").focus();
						$.modalmsg && $.modalmsg("\u4e0d\u53ef\u8d85\u8fc7\u5f53\u524d\u6700\u5927\u9875\u6570\uff01", "error");
					}
				}else {
					$("#jumpto").focus();
					$.modalmsg && $.modalmsg("\u8bf7\u8f93\u5165\u6709\u6548\u9875\u6570\uff01", "error");
				}
			},
			bar: function() {
				var data = this.data.content;
				require.config({paths: {echarts: '/assets/js/dist'}});
				require(
			    	['echarts','echarts/theme/macarons','echarts/chart/line','echarts/chart/bar'],
			    	function (ec,theme) {
			    	var myChart = ec.init(document.getElementById('main'),theme);
			    	option = {
			        	tooltip : {trigger: 'axis'},
			        	toolbox: {
				        	show : true,
				        	feature : {
					        	mark : {show: true},
					        	dataView : {show: true, readOnly: false},
					        	magicType: {show: true, type: ['line', 'bar']},
					        	restore : {show: true},
					        	saveAsImage : {show: true}
				        	}
			        	},
			        	calculable : true,
			        	legend: {
			        		data:['\u8BA2\u5355\u7B14\u6570','\u652F\u4ED8\u91D1\u989D','\u5546\u6237\u5229\u6DA6']
			        	},
			        	xAxis : [
				        	{
				        		type : 'category',
				        		data : data[4]
				        	}
			        	],
			        	yAxis : [
				        	{
					        	type : 'value',
					        	name : '\u8BA2\u5355',
					        	axisLabel : {
					        		formatter: '{value} \u5355'
					        	}
				        	},
				        	{
					        	type : 'value',
					        	name : '\u91D1\u989D',
					        	axisLabel : {
					        		formatter: '{value} \u5143'
					        	}
				        	}
			        	],
			        	series : [
				        	{
					        	name:'\u8BA2\u5355\u7B14\u6570',
					        	type:'line',
					        	yAxisIndex: 0,
					        	itemStyle: {normal: {label: {show: true}}},
					        	data:data[0]
				        	},
				        	{
					        	name:'\u652F\u4ED8\u91D1\u989D',
					        	type:'bar',
					        	yAxisIndex: 1,
					        	data:data[1]
				        	},
				        	{
					        	name:'\u5546\u6237\u5229\u6DA6',
					        	type:'bar',
					        	yAxisIndex: 1,
					        	data:data[2]
				        	}
						]
					};
					myChart.setOption(option);
					$("#main").css("width", "100%");
					myChart.resize();
					$(window).on("resize", function (){
						myChart.resize();
					});
				});
			}
		 });
		analyse.query();
	};

	$.CheckIntensity = function(pwd) {
		var Mcolor,
			Wcolor,
			Scolor,
			Color_Html;
		var m = 0;
		var Modes = 0;
		for (i = 0; i < pwd.length; i++) {
			var charType = 0;
			var t = pwd.charCodeAt(i);
			if (t >= 48 && t <= 57) {
				charType = 1;
			} else if (t >= 65 && t <= 90) {
				charType = 2;
			} else if (t >= 97 && t <= 122) {
				charType = 4;
			} else {
				charType = 4;
			}
			Modes |= charType;
		}
		for (i = 0; i < 4; i++) {
			if (Modes & 1) {
				m++;
			}
			Modes >>>= 1;
		}
		if (pwd.length <= 4) {
			m = 1;
		}
		if (pwd.length <= 0) {
			m = 0;
		}
		switch (m) {
		case 1:
			Wcolor = "pwd pwd_Weak_c";
			Mcolor = "pwd pwd_c";
			Scolor = "pwd pwd_c pwd_c_r";
			Color_Html = "弱";
			break;
		case 2:
			Wcolor = "pwd pwd_Medium_c";
			Mcolor = "pwd pwd_Medium_c";
			Scolor = "pwd pwd_c pwd_c_r";
			Color_Html = "中";
			break;
		case 3:
			Wcolor = "pwd pwd_Strong_c";
			Mcolor = "pwd pwd_Strong_c";
			Scolor = "pwd pwd_Strong_c pwd_Strong_c_r";
			Color_Html = "强";
			break;
		default:
			Wcolor = "pwd pwd_c";
			Mcolor = "pwd pwd_c pwd_f";
			Scolor = "pwd pwd_c pwd_c_r";
			Color_Html = "无";
			break;
		}
		$("#pwd_Weak").addClass(Wcolor);
		$("#pwd_Medium").addClass(Mcolor);
		$("#pwd_Strong").addClass(Scolor);
		$("#pwd_Medium").text(Color_Html);
	}
	
	$._validReg = function(){
		if ($("#account").val().length >= 3 && $("#account").val().length <= 10){
			if($("#nickname").val().length >=2 && $("#nickname").val().length <=8){
				if($("#password").val().length >=6 && $("#password").val().length <=20){
					var reg = /^[1-9]\d{4,10}$/;
					if(!reg.test($("#QQ").val())){
						alert("qq格式错误");
						return false;
					}else{
						var reg = /^1[34578]\d{9}$/;
						if(!reg.test($("#phoneNumber").val())){
							alert("手机号码格式错误");
							return false;
						}
					}
				}else{
					alert("登陆密码必须在6-20位");
					return false;
				}
			}else{
				alert("商户昵称必须2-8个字符");
				return false;
			}
		}else{
			alert("登陆账号必须在3-10位")
			return false;
		}
		return true;
	}
})(jQuery);