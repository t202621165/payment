package com.cypay.common.service.impl;

import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.cypay.common.entity.DaiFu;
import com.cypay.common.entity.Merchant;
import com.cypay.common.entity.WechatInfo;
import com.cypay.common.pattern.template.payee.wechat.WechatAuthorize;
import com.cypay.common.repository.impl.DaiFuRepository;
import com.cypay.common.repository.impl.MerchantRepository;
import com.cypay.common.repository.impl.WechatInfoRepository;
import com.cypay.common.shiro.ShiroManager;
import com.cypay.common.util.CommonUtil;
import com.cypay.common.util.QRCodeUtil;
import com.cypay.common.vo.Result;

@Service
public class WechatInfoService extends BaseServiceImpl<WechatInfoRepository, WechatInfo, WechatInfo> {

	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private DaiFuRepository daiFuRepository;
	
	@Autowired
	private MerchantRepository merchantRepository;
	
	/**
	 * 微信开放平台-appid
	 */
	@Value("${wx.open.appid}")
	private String appid;
	
	/**
	 * 微信开放平台-appsecret
	 */
	@Value("${wx.open.secret}")
	private String secret;
	
	@Override
	public boolean isExist(WechatInfo t) {
		Optional<WechatInfo> optional = baseRepository.findByOpenid(t.getOpenid());
		return optional.isPresent();
	}
	
	/**
	 * 微信登陆
	 * @param code
	 * @param state
	 */
	public Result wechatLogin(String code) {
		JSONObject json = getAuthorizeInfo(code, appid, secret);
		String unionid = json.getString("unionid");
		Optional<WechatInfo> optional = baseRepository.findByUnionid(unionid);
		if (!optional.isPresent()) {
			return Result.error("微信登录失败，未绑定平台账号，请登录到平台手动绑定！");
		}
		
		Optional<Merchant> merchant = merchantRepository.findById(optional.get().getId());
		if (!merchant.isPresent()) {
			return Result.error("账户不存在或已被删除！");
		}
		
		ShiroManager.login(merchant.get().setEncrypt(false));
		return Result.success();
	}
	
	/**
	 * 生成微信网页授权二维码
	 * @param request
	 * @param response
	 */
	public void createWechatQRCode(HttpServletRequest request, HttpServletResponse response) {
		DaiFu daiFu = findDaifuInfo();
		if (daiFu != null) {
			String url = CommonUtil.getWholeDomainName(daiFu.getRedirectUrl());
			String redirect_url = ("".equals(url) ? 
					CommonUtil.getRequestDomain(request) : url) + "/mer/wechat-bind";
			String uuid = ShiroManager.getMerchant().getUuid();
			String qrcodeUrl = String.format(WechatAuthorize.AUTHORIZE_URL, daiFu.getEmail(), redirect_url, WechatAuthorize.AUTHORIZE_SCOPE_USERINFO, uuid);
			QRCodeUtil.createQRCode(qrcodeUrl, response);
		}
	}
	
	/**
	 * 微信网页授权成功绑定账号
	 * @param code
	 * @param uuid
	 * @param model
	 */
	public void wechatBind(String code, String uuid, Model model) {
		model.addAttribute("state", false);
		String content = "微信账号绑定成功";
		WechatInfo wi = baseRepository.findByMerchantUuid(uuid);
		// 判断是否已绑定微信账号
		if (wi != null && wi.getId() == null) {
			DaiFu daiFu = findDaifuInfo();
			JSONObject json = getAuthorizeInfo(code, daiFu.getEmail(), daiFu.getAppSecret());
			String openid = json.getString("openid");
			String accessToken = json.getString("access_token");
			// 获取授权成功
			if (!StringUtils.isEmpty(accessToken)) {
				content = "绑定成功！";
				model.addAttribute("state", true);
				// 获取用户基本信息
				String infoUrl = String.format(WechatAuthorize.USERINFO_URL, accessToken, openid);
				logger.info("USERINFO_URL: " + infoUrl);
				JSONObject info = JSON.parseObject(restTemplate.getForObject(infoUrl, String.class));
				logger.info("USERINFO: " + info);
				// 获取用户信息成功
				if (!StringUtils.isEmpty(info.get("openid"))) {
					WechatInfo wechatInfo = JSON.toJavaObject(info, WechatInfo.class);
					wechatInfo.setOpenid(openid);
					wechatInfo.setAccessToken(accessToken);
					wechatInfo.setMerchantId(wi.getMerchantId());
					wechatInfo.setExpiresIn(json.getIntValue("expires_in"));
					wechatInfo.setRefreshToken(json.getString("refresh_token"));
					Result result = save(wechatInfo);
					if (!result.getState()) {
						content = "绑定失败，当前微信已绑定其它账号";
						model.addAttribute("state", false);
					}
				}
			} else {
				content = "获取授权失败：" + json.getString("errmsg");
			}
		} else {
			content = "请勿重复绑定！";
		}
		model.addAttribute("content", content);
	}

	public WechatInfo findByMerchantId(Long merchantId) {
		return baseRepository.findByMerchantId(merchantId);
	}

	private DaiFu findDaifuInfo() {
		return daiFuRepository.findByMark("wechat");
	}
	
	/**
	 * 获取微信授权信息
	 * 		access_token和openid
	 * @param code
	 * @return
	 */
	private JSONObject getAuthorizeInfo(String code, String appid, String secret) {
		// 获取授权access_token和openid
		String url = String.format(WechatAuthorize.ACCESS_TOKEN_URL, appid, secret, code);
		logger.info("ACCESS_TOKEN_URL: " + url);
		JSONObject result = JSON.parseObject(restTemplate.getForObject(url, String.class));
		logger.info("ACCESS_TOKEN: " + result);
		return result;
	}
}
