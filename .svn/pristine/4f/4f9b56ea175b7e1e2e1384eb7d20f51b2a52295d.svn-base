package com.cypay.common.service.impl;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;

import com.cypay.common.entity.Bank;
import com.cypay.common.entity.SettleMent;
import com.cypay.common.pattern.template.settlement.SettlementTemplate;
import com.cypay.common.repository.impl.BankRepository;
import com.cypay.common.repository.impl.SettleMentRepository;
import com.cypay.common.util.PageData;
import com.cypay.common.vo.Result;
import com.cypay.common.vo.SettleMentVo;

@Service
public class SettleMentService extends BaseServiceImpl<SettleMentRepository, SettleMent,SettleMentVo>{
	
	@Autowired
	private BankRepository bankRepository;
	
	private Map<String, SettlementTemplate> settlementTemplates = new HashMap<>();
	
	public SettleMentService(List<SettlementTemplate> list) {
		this.settlementTemplates = list.parallelStream().collect(Collectors.toMap(SettlementTemplate::mark, Function.identity()));
	}
	
	public Page<SettleMentVo> findSettleMentBySerailNumber(SettleMentVo v,PageData pageData){
		return baseRepository.findSettleMentBySerailNumber(v.getSerialNumber(), pageData.ofPageable());
	}
	
	
	
	/**
	 * 金额结算
	 * banks 银行账户列表 存储变动后的账户数据
	 * settleMents 结算列表 存储要结算商户的数据
	 * @return
	 */
	@Transactional
	public Result settlement(List<SettleMentVo> list,String flag){
		List<SettleMent> settleMents = new ArrayList<SettleMent>();
		List<Bank> banks = bankRepository.findByIdIn(
				list.parallelStream().map(SettleMentVo::getBankId).collect(Collectors.toList()));
		for (Bank bank : banks) {
			Long bankId = bank.getId();
			for (SettleMentVo v : list) {
				if (v.getBankId().compareTo(bankId) == 0) {
					BigDecimal useAmount = v.getUseAmount();
					BigDecimal amount = useAmount.add(v.getFee());
					if (v.getFee().compareTo(BigDecimal.ZERO) > -1 && useAmount.compareTo(BigDecimal.ZERO) > 0 && bank.getOverMoney().compareTo(amount) > -1) {
						bank.setOverMoney(bank.getOverMoney().subtract(amount));
						bank.setAllPay(bank.getAllPay().add(amount));
						SettleMent settleMent = new SettleMent();
						settleMent.setAmount(useAmount);
						settleMent.setCost(v.getFee());
						settleMent.setBank(bank);
						settleMent.setDiscription(flag + "结算");
						
						settleMent.setMerchant(bank.getMerchant());
						settleMent.setSerialNumber("F_" + snowflakeIdWorker.nextId());
						settleMent.setState(2);
						settleMents.add(settleMent);
					}
					break;
				}
			}
		}
		if (!settleMents.isEmpty()) {
			baseRepository.saveAll(settleMents);
			return Result.success("请前往‘资金管理 ->提现业务->待付款’列表完成结算！");
		}
		return Result.error("没有符合条件的结算记录");				
	}
	
	/**
	 * 结算业务
	 * @param list
	 * @param mark
	 * @return
	 */
	@Transactional
	public Result payment(List<Long> ids, String mark, String disc) {
		return settlementTemplates.get(mark).settlement(ids, disc);
	}
	
	public List<SettleMentVo> findGalleryFunds(Long merchantId) throws ParseException{
		return baseRepository.findGalleryFunds(merchantId);
	}
	
	public Result clear(SettleMentVo v){
		int i = baseRepository.deleteSettleMentByDate(v.getStartDate(), v.getEndDate());
		if (i > 0)
			return Result.success("结算信息清除成功");
		return Result.error("结算信息清除失败");
	}
	
	public Map<String,BigDecimal> findTotalAmountByState(Integer state){
		return baseRepository.findByTotalAmountByState(state);
	}
	
	public int updateStateById(Integer state,Long id,Date date){
		return baseRepository.updateStateById(state, id, date);
	}
}
